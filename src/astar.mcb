import log.mcbm
# 10360b5a-27d5-480f-b335-4c58e679072b

function uninstall {
	scoreboard objectives remove mcb.i
	scoreboard objectives remove aS.v
	scoreboard objectives remove aS.node.id
	scoreboard objectives remove aS.node.f
	scoreboard objectives remove aS.node.h
	scoreboard objectives remove aS.node.g
	scoreboard objectives remove aS.node.x
	scoreboard objectives remove aS.node.y
	scoreboard objectives remove aS.node.z
}

function load {
	# Objectives
	scoreboard objectives add mcb.i dummy
	scoreboard objectives add aS.v dummy
	scoreboard objectives add aS.node.id dummy [{"text": "", "color": "gray"}, {"text": "A*", "color": "green"}, " node", {"text": ".", "color": "dark_gray"}, {"text": "id", "color": "yellow"}]
	scoreboard objectives add aS.node.f dummy [{"text": "", "color": "gray"}, {"text": "A*", "color": "green"}, " node", {"text": ".", "color": "dark_gray"}, {"text": "f", "color": "gold"}]
	scoreboard objectives add aS.node.h dummy [{"text": "", "color": "gray"}, {"text": "A*", "color": "green"}, " node", {"text": ".", "color": "dark_gray"}, {"text": "h", "color": "light_purple"}]
	scoreboard objectives add aS.node.g dummy [{"text": "", "color": "gray"}, {"text": "A*", "color": "green"}, " node", {"text": ".", "color": "dark_gray"}, {"text": "g", "color": "aqua"}]

	scoreboard objectives add aS.node.x dummy [{"text": "", "color": "gray"}, {"text": "A*", "color": "green"}, " node", {"text": ".", "color": "dark_gray"}, {"text": "x", "color": "red"}]
	scoreboard objectives add aS.node.y dummy [{"text": "", "color": "gray"}, {"text": "A*", "color": "green"}, " node", {"text": ".", "color": "dark_gray"}, {"text": "y", "color": "green"}]
	scoreboard objectives add aS.node.z dummy [{"text": "", "color": "gray"}, {"text": "A*", "color": "green"}, " node", {"text": ".", "color": "dark_gray"}, {"text": "z", "color": "blue"}]

	# Variables
	scoreboard players add #aS.last_path_id aS.v 0

	scoreboard players set $aS.enable_3d aS.v 0

	scoreboard players set $aS.max_mspt aS.v 20
	scoreboard players set $aS.orthogonal_cost aS.v 10
	scoreboard players set $aS.diagonal_cost aS.v 14
	scoreboard players set $aS.vertical_cost aS.v 14
	scoreboard players set $aS.default_max_closed_nodes aS.v 1000

	scoreboard players add #aS.state aS.v 0

	# Constants
	scoreboard players set #-1 aS.v -1
	scoreboard players set #2 aS.v 2
	scoreboard players set #4 aS.v 4
	scoreboard players set #8 aS.v 8
	scoreboard players set #10 aS.v 10
	scoreboard players set #16 aS.v 16
	scoreboard players set #32 aS.v 32
	scoreboard players set #64 aS.v 64

	# Storage
	execute unless data storage astar:_ queue run data modify storage astar:_ queue set value []
}

blocks can_path_on {
	minecraft:gray_concrete
	minecraft:red_concrete
	minecraft:lime_concrete
}

blocks can_path_through {
	minecraft:air
	minecraft:cave_air
	minecraft:void_air
}

dir debug {
	function map_h_cost {
		kill @e[tag=aS.debug]
		LOOP(11, x) {
			LOOP(11, z) {
				execute positioned <%x-5%> <%1%> <%z-5%> summon minecraft:text_display run {
					tag @s add aS.debug
					function astar:_/node/calculate
					data modify entity @s text set value '["h", {"score":{"name":"@s","objective":"aS.node.h"}}, " g", {"score":{"name":"@s","objective":"aS.node.g"}}, "\\nf", {"score":{"name":"@s","objective":"aS.node.f"}}]'
					data modify entity @s transformation.right_rotation set value {axis:[1, 0, 0], angle:-1.5}
					data modify entity @s transformation.translation set value [0f,0f,0.125f]
					data modify entity @s transformation.scale set value [0.5f,0.5f,0.5f]
					data modify entity @s background set value 0
				}
			}
		}
	}
}

function queue_path {
	execute store result storage astar:input new_path.id int 1 run scoreboard players add #aS.last_path_id aS.v 1
	data modify storage astar:_ queue append from storage astar:input new_path
	data remove storage astar:input new_path
}

function clear_queue {
	data remove storage astar:_ queue
	data modify storage astar:_ queue set value []
}

dir _ {
	dir search {
		function start {
			#$ INPUT: {path: {id: int, start: [int, int, int], end: [int, int, int], callback_uuid: "uuid"}}

			execute store result score #aS.end.x aS.v run data get storage astar:_ path.end[0]
			execute store result score #aS.end.y aS.v run data get storage astar:_ path.end[1]
			execute store result score #aS.end.z aS.v run data get storage astar:_ path.end[2]

			execute summon minecraft:marker run {
				tag @s add aS.start
				tag @s add aS.node
				tag @s add aS.next
				data modify entity @s Pos set from storage astar:_ path.start
				# function astar:_/node/calculate
				scoreboard players set @s aS.node.id
			}
		}

		function spread {
			scoreboard players operation #aS.parent.g aS.v = @s aS.node.g

			execute if score $aS.enable_3d aS.v matches 0 run {
				LOOP (3,y) {
					LOOP (3,x) {
						LOOP (3,z) {
							execute store result score #x<%x-1%>y<%y-1%>z<%z-1%> aS.v unless block ~<%x-1%> ~<%y-1%> ~<%z-1%> #astar:can_path_through
						}
					}
				}

				# Orthogonal flat movement validation
				scoreboard players operation #aS.move_cost aS.v = $astar.straight_movement_cost aS.v
				LOOP(3,x){
					LOOP(3,z){
						!IF(x-1 != 0 ? !(z-1 != 0) : z-1 != 0){
							(
								execute
								if score #x<%x-1%>y-1z<%z-1%> aS.v matches 1
								if score #x<%x-1%>y0z<%z-1%> aS.v matches 0
								if score #x<%x-1%>y1z<%z-1%> aS.v matches 0
								positioned ~<%x-1%> ~ ~<%z-1%>
								if block ~ ~-1 ~ #astar:can_path_on
								run function astar:_/search/node/update
							)
						}
					}
				}

				# Diagonal flat movement validation
				scoreboard players operation #aS.move_cost aS.v = $astar.diagonal_movement_cost aS.v
				LOOP(3,x){
					LOOP(3,z){
						!IF(x-1 != 0 && z-1 != 0){
							(
								execute
								if score #x<%x-1%>y-1z<%z-1%> aS.v matches 1
								if score #x<%x-1%>y0z<%z-1%> aS.v matches 0
								if score #x<%x-1%>y1z<%z-1%> aS.v matches 0
								if score #x0y0z<%z-1%> aS.v matches 0
								if score #x0y1z<%z-1%> aS.v matches 0
								if score #x<%x-1%>y0z0 aS.v matches 0
								if score #x<%x-1%>y1z0 aS.v matches 0
								positioned ~<%x-1%> ~ ~<%z-1%>
								if block ~ ~-1 ~ #astar:can_path_on
								run function astar:_/search/node/update
							)
						}
					}
				}
			}

		}
	}

	dir node {
		function create {
			execute summon minecraft:marker run function astar:_/node/calculate
		}

		function update {
			scoreboard players set #ifelse aS.v 0
			execute as @e[type=minecraft:marker,tag=aS.node,distance=..0.1,limit=1] run {
				say Updating node
				scoreboard players set #ifelse aS.v 1
			}
			execute if score #ifelse aS.v matches 1 run return 0
			# Summon new node
			execute summon minecraft:marker run function astar:_/node/calculate
		}

		function test {
			scoreboard players set #aS.end.x aS.v 0
			scoreboard players set #aS.end.y aS.v 1
			scoreboard players set #aS.end.z aS.v 0

			function astar:_/node/calculate
		}

		function calculate {
			tag @s add aS.node

			data modify storage astar:_ Pos set from entity @s Pos
			execute store result score #diff_mid aS.v store result score @s aS.node.x run data get storage astar:_ Pos[0]
			execute store result score #dy aS.v store result score @s aS.node.y run data get storage astar:_ Pos[1]
			execute store result score #dz aS.v store result score @s aS.node.z run data get storage astar:_ Pos[2]

			# Calculate the difference between the current node and the end node
			scoreboard players operation #diff_mid aS.v -= #aS.end.x aS.v
			scoreboard players operation #dy aS.v -= #aS.end.y aS.v
			scoreboard players operation #dz aS.v -= #aS.end.z aS.v

			# Get the absolute value of the difference
			execute if score #diff_mid aS.v matches ..-1 run scoreboard players operation #diff_mid aS.v *= #-1 aS.v
			execute if score #dy aS.v matches ..-1 run scoreboard players operation #dy aS.v *= #-1 aS.v
			execute if score #dz aS.v matches ..-1 run scoreboard players operation #dz aS.v *= #-1 aS.v

			# Get the smallest value of the difference
			scoreboard players operation #diff_min aS.v = #diff_mid aS.v
			scoreboard players operation #diff_min aS.v < #dy aS.v
			scoreboard players operation #diff_min aS.v < #dz aS.v

			# Get the largest value of the difference
			scoreboard players operation @s aS.node.h = #diff_mid aS.v
			scoreboard players operation @s aS.node.h > #dy aS.v
			scoreboard players operation @s aS.node.h > #dz aS.v

			# Get the middle value of the difference
			# diff_mid = (dx + dy + dz - diff_min - diff_max)
			scoreboard players operation #diff_mid aS.v += #dy aS.v
			scoreboard players operation #diff_mid aS.v += #dz aS.v
			scoreboard players operation #diff_mid aS.v -= #diff_min aS.v
			scoreboard players operation #diff_mid aS.v -= @s aS.node.h

			# ----------------------- #
			# Calculate the heuristic #
			# ----------------------- #
			# This is using a HEAVILY reduced version of this formula:
			# ((c - b) * diff_min) + ((b - a) * diff_mid) + (a * diff_max)
			# Since c and b are equal, subtracting, then multiplying them by diff_min is redundant
			# ((b - a) * diff_mid) + (a * diff_max)
			# b - a = 4, so we can just multiply diff_mid by 4
			# (4 * diff_mid) + (a * diff_max)
			# a = 10, so we can just multiply diff_max by 10
			# (10 * diff_max) + (4 * diff_mid)
			# ----------------------- #

			# a = (10 * diff_max)
			scoreboard players operation @s aS.node.h *= #10 aS.v
			# b = (4 * diff_mid)
			scoreboard players operation #diff_mid aS.v *= #4 aS.v
			# (a + b)
			execute store result score @s aS.node.f run scoreboard players operation @s aS.node.h += #diff_mid aS.v

			# G cost
			# The value of #aS.this_move_cost is calculated when the node is created, and is based on the direction from the parent.
			scoreboard players operation @s aS.node.g = #aS.this_move_cost aS.v
			scoreboard players operation @s aS.node.g += #aS.parent.g aS.v
			# F cost
			# h cost was added in the last calc step of the heuristic
			scoreboard players operation @s aS.node.f += @s aS.node.g
		}
	}

	dir exploration_cache {
		function add {
			#$ Args: {pos: [int, int, int]}
			$data modify storage astar:_ exploration_cache."$(pos)" set value 1b
		}

		function clear {
			data remove storage astar:_ exploration_cache
			data modify storage astar:_ exploration_cache set value {}
		}
	}
}

